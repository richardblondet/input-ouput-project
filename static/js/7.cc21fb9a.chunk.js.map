{"version":3,"sources":["components/LanguageSwitcher.tsx","routes/dashboard.content.tsx"],"names":["useIntl","locale","updateLocale","availableLanguages","i18nTools","defaultValue","onChange","e","target","value","map","lang","H5","Typography","H6","Link","Paragraph","Span","TextArea","styled","DashboardContent","useContent","content","setDate","setEditorValue","translate","date","Date","editor","localeUtils","console","log","width","color","display","mx","minWidth","to","as","Button","mr","position","top","pt","style","flexWrap","borderBottom","p","textAlign","m","mt","fontSize","borderLeft","px","fontWeight","formatDay","onDayClick","name","saveEditorField","rows","spellCheck"],"mappings":"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","file":"static/js/7.cc21fb9a.chunk.js","sourcesContent":["import React from 'react';\nimport { useIntl } from '../store/hooks';\nimport { i18nTools } from '../store/utils';\nimport { Select } from './Utils';\n\nexport default () => {\n  const { locale, updateLocale } = useIntl();\n  const { availableLanguages } = i18nTools();\n\n  return (\n    <Select defaultValue={locale} onChange={(e) => updateLocale(e.target.value)}>\n      {availableLanguages.map((lang) => {\n        return <option key={lang} value={lang}>{lang}</option>;\n      })}\n    </Select>\n  )\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Typography } from '../components/Typography';\nimport { Box, Button, DashboardNavbar } from '../components/Utils';\nimport { useContent, useIntl } from '../store/hooks';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport { i18nTools } from '../store/utils';\nimport { FiPower } from 'react-icons/fi';\nimport LanguageSwitcher from '../components/LanguageSwitcher';\n\nconst { H5, H6, Link, Paragraph, Span } = Typography;\n\nconst TextArea = styled('textarea')`\n  display: block;\n  width: 100%;\n  min-height: calc(1.5em + .75rem + 2px);\n  padding: .375rem .75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: .25rem;\n  transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n`;\n\nconst DashboardContent = () => {\n  const { content, setDate, setEditorValue } = useContent();\n  const { locale, translate } = useIntl();\n  const { date = new Date(), editor = {} } = content;\n  const { availableLanguages, localeUtils } = i18nTools();\n  \n  console.log('editor', editor);\n  const saveEditorField = (lang: string, value: string): void => {\n    editor[lang] = value;\n    setEditorValue(editor);\n  };\n  return (\n    <Box width=\"100%\">\n      <DashboardNavbar>\n        <H5 color=\"#959599\">\n          {translate('dashboard.content')}\n        </H5>\n        <Box display=\"flex\">\n          <Box mx=\"s\">\n            <LanguageSwitcher />\n          </Box>\n          <Box minWidth=\"150px\" mx=\"xs\">\n            <Link to=\"/\" as={Button}>\n              <Box mr=\".375rem\" display=\"inline\" position=\"relative\" top={3}><FiPower /></Box>\n              {translate('dashboard.navbar.output.page')}\n            </Link>\n          </Box>\n        </Box>\n      </DashboardNavbar>\n      <Box>\n        {/* Date Field */}\n        <Box display=\"flex\" pt=\"m\" style={{ flexWrap: \"wrap\", borderBottom: 'solid 1px #efefef' }}>\n          <Box p=\"m\" width={[ 1, '25%' ]} style={{ textAlign: 'right' }}>\n            <H6 m=\"none\">{translate('dashboard.content.date.field.label')}</H6>\n            <Paragraph mt=\"s\" fontSize={0}>\n              {translate('dashboard.content.date.field.helper')}\n            </Paragraph>\n          </Box>\n          <Box width={[ 1, '50%' ]} style={{ borderLeft: 'solid 1px #efefef' }}>\n            <H6 px=\"22px\">{translate('dashboard.content.selected.date')} <Span fontWeight={900}>{localeUtils.formatDay(date, locale)}</Span></H6>\n            <DayPicker onDayClick={(e) => setDate(e)} locale={locale} localeUtils={localeUtils}  />\n          </Box>\n        </Box>\n        {/* Editor Field */}\n        <Box display=\"flex\" style={{ flexWrap: \"wrap\" }}>\n          <Box p=\"m\" width={[ 1, '25%' ]} style={{ textAlign: 'right' }}>\n            <H6 m=\"none\">Text Field: </H6>\n            <Paragraph mt=\"s\" fontSize={0}>{translate('dashboard.content.text.field.helper')}</Paragraph>\n          </Box>\n          <Box width={[ 1, '300px' ]} p=\"22px\" style={{ borderLeft: '1px solid rgba(0,0,0,.125)' }}>\n            {availableLanguages.map((lang) => {\n              return locale === lang ? (\n                <Box key={lang}>\n                  <TextArea \n                    key={lang}\n                    name={`text[${lang}]`} \n                    onChange={(e) => saveEditorField(lang, e.target.value)} \n                    rows={5}\n                    spellCheck={true}\n                    value={(editor[lang] as string)} />\n                </Box>\n              ) : null\n            })}\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default DashboardContent;\n"],"sourceRoot":""}